
1. First, write a simple program called null.c that creates a pointer
to an integer, sets it to NULL, and then tries to dereference it. Compile this into an executable called null. What happens when you
run this program?

ANSWER: program borks with a seg fault

2. Next, compile this program with symbol information included (with
the -g flag). Doing so let’s put more information into the executable, enabling the debugger to access more useful information
about variable names and the like. Run the program under the debugger by typing gdb null and then, once gdb is running, typing
run. What does gdb show you?

ANSWER: gdb doesn't show much more than just running it; that it encounters a seg fault

3. Finally, use the valgrind tool on this program. We’ll use the memcheck
tool that is a part of valgrind to analyze what happens. Run
this by typing in the following: valgrind --leak-check=yes
null. What happens when you run this? Can you interpret the
output from the tool?

ANSWER: valgrind tells us what's wrong with the program, identifying the incorrect dereference
"Invalid read of size 4 at 0x4004E6: main (null.c:7)
Address 0x0 is not stack'd, malloc'd or (recently) free'd"


4. Write a simple program that allocates memory using malloc() but
forgets to free it before exiting. What happens when this program
runs? Can you use gdb to find any problems with it? How about
valgrind (again with the --leak-check=yes flag)?

ANSWER: valgrind identifies the memory leak
"4 bytes in 1 blocks are definitely lost in loss record 1 of 1"

5. Write a program that creates an array of integers called data of size
100 using malloc; then, set data[100] to zero. What happens
when you run this program? What happens when you run this
program using valgrind? Is the program correct?

ANSWER: the program runs without crashing
valgrind identifies the problematic write
the program is not correct - it writes past the end of the array

6. Create a program that allocates an array of integers (as above), frees
them, and then tries to print the value of one of the elements of
the array. Does the program run? What happens when you use
valgrind on it?

ANSWER: the program runs and prints, even though it no longer owns that memory
valgrind identifies the invalid read

7. Now pass a funny value to free (e.g., a pointer in the middle of the
array you allocated above). What happens? Do you need tools to
find this type of problem?

ANSWER: the program aborts because of the invalid pointer
You don't need a tool to see there is an issue, but valgrind helps pin it down with more info

I get it, valgrind=good
